<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Things I Learned about Rails Today]]></title>
  <link href="http://steven-ferguson.github.io/atom.xml" rel="self"/>
  <link href="http://steven-ferguson.github.io/"/>
  <updated>2014-07-19T15:03:11-07:00</updated>
  <id>http://steven-ferguson.github.io/</id>
  <author>
    <name><![CDATA[Steven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Switches with Ruby on Rails]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/07/19/t-switches-with-ruby-on-rails/"/>
    <updated>2014-07-19T13:47:42-07:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/07/19/t-switches-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>In just about every Rails application that I have built there has been a need to switch a model between one or more states. This post will demonstrate the solution I use to implement this common UX pattern.</p>

<h3>The Setup</h3>

<p>I have a Ruby on Rails application that I use to manange my robot minions, and I would like easily turn them on and off from my dashboard view.</p>

<h5>Insert picture showing the dashboard with switches.</h5>

<p>You can see <a href="">my minion dashboard in action here</a>.</p>

<h3>Steps to implement:</h3>

<ol>
<li><p>Button group with active status button having added class</p></li>
<li><p>Link_to&rsquo;s set to patch with updated status</p></li>
<li><p>Nested Controller with update and destroy actions. This way I can isolate my response to when a user clicks a toggle button instead of polluting the main resource update actions</p></li>
<li><p>AJAXify it</p></li>
<li><p>Some additional ujs options that can be added to</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Duck Typing]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/06/16/duck-typing/"/>
    <updated>2014-06-16T23:28:18-07:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/06/16/duck-typing</id>
    <content type="html"><![CDATA[<p>One of my big breakthroughs in understanding object oriented design in Ruby came when I learned about <a href="http://en.wikipedia.org/wiki/Duck_typing">duck typing</a>. Wikipedia provides a nice definiition of the concept:</p>

<blockquote><p>duck typing is a style of typing in which an object&rsquo;s methods and properties determine the valid semantics, rather than its inheritance from a particular class or implementation of an explicit interface.</p></blockquote>

<p>This means that in Ruby it does not matter if an object is a specific type or class, only that it can respond to a given message. For example, in the <code>stringify</code> method below, it does not matter if the argument is an integer or symbol or some other class, only that it can respond to the <code>to_s</code> method.</p>

<pre><code>def stringify(a)
  a.to_s
end

stringify(1)
=&gt; "1"

stringify(:hello)
=&gt; "hello"

class NewClass
  def to_s
    "works for custom objects too!"
  end
end

stringify(NewClass.new)
=&gt; "works for custom objects too!"
</code></pre>

<p>Not having to care about a specific object&rsquo;s class enables a lot of flexiblity for swaping out collaborator objects. To illustrate this, let&rsquo;s take a look at an example:</p>

<h3>File Storage with Duck Typing</h3>

<p>My app generates reports, and I would like to save these reports. Initially, I just want to save the reports to my local disk.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Report</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@data</span> <span class="o">=</span> <span class="n">data</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save_to</span><span class="p">(</span><span class="n">storage</span><span class="p">)</span>
</span><span class='line'>    <span class="n">storage</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="vi">@name</span><span class="p">,</span> <span class="vi">@data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FileStorage</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;reports/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>      <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">report</span> <span class="o">=</span> <span class="no">Report</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Sales Figures&#39;</span><span class="p">,</span> <span class="s1">&#39;sales data blah...&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">file_store</span> <span class="o">=</span> <span class="no">FileStorage</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">save_to</span><span class="p">(</span><span class="n">file_store</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later, I decide that it would also be nice to have the ability to upload reports to S3. With duck typing, implementing this new feature is as simple as creating a new class for uploading to S3 which implements a <code>store</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">S3Storage</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@bucket</span> <span class="o">=</span> <span class="ss">AWS</span><span class="p">:</span><span class="ss">:S3</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">buckets</span><span class="o">[</span><span class="n">bucket_name</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@bucket</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">report</span> <span class="o">=</span> <span class="no">Report</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Sales Figures&#39;</span><span class="p">,</span> <span class="s1">&#39;sales data blah...&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">s3_store</span> <span class="o">=</span> <span class="no">S3Storage</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;my_bucket&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">save_to</span><span class="p">(</span><span class="n">s3_store</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start thinking about objects in terms of the messages they receive, and you will be rewarded with the flexibility that duck typing allows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RSpec Shared Context for DRYer Specs]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/05/17/using-rspec-shared-context-for-dryer-specs/"/>
    <updated>2014-05-17T18:20:42-07:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/05/17/using-rspec-shared-context-for-dryer-specs</id>
    <content type="html"><![CDATA[<p>Do you ever find that many of your specs have a similar setup that you are repeating over and over? I often find this happening when I&rsquo;m writing feature specs that require a logged in user. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;some super cool feature&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">background</span> <span class="s1">&#39;login an admin&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">role</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">confirm!</span>
</span><span class='line'>    <span class="n">login_as</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">scope</span><span class="p">:</span> <span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;my super cool scenario&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If my login or authentication process changes, I have to manually go into each spec and change the code. I also find that this setup code clutters the spec and makes it harder to read. If we could extract the setup code and replace it with an easy to read single line, it would solve both of these problems.</p>

<p><a href="https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-context">RSpec shared contexts</a> provide just this type of solution. Using a shared context we can extract the setup into its own file, and rewrite our feature spec in a cleaner way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;some super cool feature&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">include_context</span> <span class="s1">&#39;a logged in admin&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;my super cool scenario&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To create a shared context:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ./spec/support/shared_contexts/a_logged_in_admin.rb    </span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_context</span> <span class="s1">&#39;a logged in admin&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="s1">&#39;create and login admin&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">role</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">confirm!</span>
</span><span class='line'>    <span class="n">login_as</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">scope</span><span class="p">:</span> <span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since all files located in <code>spec/support</code> are automatically required in the default <code>spec_helper.rb</code>, we can call the context from any spec. Now when we need to change how a user is logged in, we just have to change the code in our shared context and without having to change our specs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Outgoing Command Messages With RSpec]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/03/09/mocks-and-stubs-with-bogus/"/>
    <updated>2014-03-09T13:10:30-07:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/03/09/mocks-and-stubs-with-bogus</id>
    <content type="html"><![CDATA[<p>As the size and complexity of the applications I have been working on has grown, the importance of writing good unit test has become increasingly apparent. The goal is to have a test suite that is fast and able to withstand changes.</p>

<p>One of the best approaches I have found to writing good unit tests is discussed by Sandi Metz in <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object Oriented Design in Ruby</a> and also in a <a href="https://speakerdeck.com/skmetz/magic-tricks-of-testing-railsconf">talk she gave at RailsConf in 2013</a>.</p>

<p>She has a rule about testing outgoing command messages that says, <em>&ldquo;expect to send outgoing command messages&rdquo;</em>. This means that we should assert that the method actually issues the command message, but we don&rsquo;t assert the result of that message.</p>

<p>For example, suppose I have a party, and I want users to be able to RSVP:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rsvp</span><span class="p">(</span><span class="n">party</span><span class="p">)</span>
</span><span class='line'>    <span class="n">party</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want to assert that when <code>user.rsvp(party)</code> is called, the <code>add_guest</code> message is sent to the party object. Mocks are the perfect tool for testing these command messages because they allow us to test that the correct message is being passed without worrying about how the other object actually deals with that message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#rsvp&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;tells the party to add the user as a guest&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">party</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;party&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">party</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:add_guest</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">rsvp</span><span class="p">(</span><span class="n">party</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows us to test the <code>rsvp</code> method without having to actually deal with the Party class&#8217; implementation of <code>add_guest</code>. But what happens if we change the public interface for <code>add_guest</code>to allow a guest specify how many to friends they plan to bring to the party?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Party</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_guest</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">number_of_companions</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rsvp</span><span class="p">(</span><span class="n">party</span><span class="p">)</span>
</span><span class='line'>    <span class="n">party</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Our <code>rsvp</code> method is now broken because the <code>add_guest</code> method requires two arguments, but we are only passing it one. Unfortunately our test for <code>rsvp</code> still passes because our test double does not reflect the actual interface that it is mocking.</p>

<p>To solve this problem I recently started using a mocking framework called <a href="https://github.com/psyho/bogus">Bogus</a>. It ensures that your test doubles have the same interface  as the real class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bogus/rspec&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#rsvp&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;tells the party to add the user as a guest&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">party</span> <span class="o">=</span> <span class="n">fake</span><span class="p">(</span><span class="ss">:party</span><span class="p">)</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">rsvp</span><span class="p">(</span><span class="n">party</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">party</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_received</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we run the test we receive the following failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Failures</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">1</span><span class="p">)</span> <span class="no">User</span><span class="c1">#rsvp tells the party to add the user as a guest</span>
</span><span class='line'>     <span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="n">party</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>     <span class="ss">ArgumentError</span><span class="p">:</span>
</span><span class='line'>       <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Great! Our test double now implements the same interface as the actual Party class and alerts us that our <code>rsvp</code> method is not passing the correct number of arguments. Let&rsquo;s update <code>rsvp</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rsvp</span><span class="p">(</span><span class="n">party</span><span class="p">)</span>
</span><span class='line'>    <span class="n">party</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run our test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Failures</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">1</span><span class="p">)</span> <span class="no">User</span><span class="c1">#rsvp tells the party to add the user as a guest</span>
</span><span class='line'>     <span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="n">expect</span><span class="p">(</span><span class="n">party</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_received</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>     <span class="ss">ArgumentError</span><span class="p">:</span>
</span><span class='line'>       <span class="n">tried</span> <span class="n">to</span> <span class="n">stub</span> <span class="n">add_guest</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">number_of_companions</span><span class="p">)</span> <span class="n">with</span> <span class="ss">arguments</span><span class="p">:</span> <span class="c1">#&lt;User:0x007fa49210caa0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoops! Looks like our stub for add_guest doesn&rsquo;t implement the correct interface for <code>add_guest</code>. Let&rsquo;s update it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#rsvp&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;tells the party to add the user as a guest&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">party</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_received</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mo">006</span> <span class="n">seconds</span>
</span><span class='line'><span class="mi">1</span> <span class="n">example</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Another great feature of Bogus is that it supports mocking a duck type. For example, suppose that in addition to parties, we want users to be able to rsvp to dinners. We can implement this with a duck type by creating an <code>add_guest</code> method for our new Dinner class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dinner</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_guest</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">number_of_companions</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rsvp</span><span class="p">(</span><span class="n">guestable</span><span class="p">)</span>
</span><span class='line'>    <span class="n">guestable</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now in our test we can mock our duck type interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#rsvp&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;tells the guestable to add the user as a guest&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">guestable</span> <span class="o">=</span> <span class="n">fake</span><span class="p">(</span><span class="ss">:guestable</span><span class="p">)</span> <span class="p">{</span> <span class="o">[</span><span class="no">Party</span><span class="p">,</span> <span class="no">Dinner</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">rsvp</span><span class="p">(</span><span class="n">guestable</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">guestable</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_received</span><span class="o">.</span><span class="n">add_guest</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mocks are a great way to focus on the messages that your objects are sending when testing. Give them a try and experience the benefits of a faster more resilient test suite.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/03/04/rake/"/>
    <updated>2014-03-04T20:23:26-08:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/03/04/rake</id>
    <content type="html"><![CDATA[<p><a href="http://rake.rubyforge.org/">Rake</a> is something I have been using since day one with Rails, but that I really haven&rsquo;t gone any deeper with than the basic rails rake tasks. Today I had to write a rake tasks that ran some checks and updated records.</p>

<p>Here&rsquo;s what I learned:</p>

<ol>
<li><p>This <a href="http://jasonseifer.com/2010/04/06/rake-tutorial">article</a> by Jason Seifer was a great introduction to rake. The big idea is that rake has namespaces and inside those namespaces you define tasks.</p>

<pre><code> namespace :feed do
   desc "Feed dog" 
   task :dog =&gt; :environment do
     puts "fed the dog"
   end

   desc "Feed cat"
   task :cat =&gt; :environment do 
     puts "fed the cat"
   end

   desc "Feed dog and cat"
   task :all =&gt; [:dog, :cat]
 end
</code></pre></li>
<li><p>Rake tasks should be tested. <a href="http://robots.thoughtbot.com/test-rake-tasks-like-a-boss">Thoughtbot</a> provides a really nice shared context that makes testing very easy.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Deployment]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/02/17/continuous-deployment/"/>
    <updated>2014-02-17T12:08:47-08:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/02/17/continuous-deployment</id>
    <content type="html"><![CDATA[<p>I have been hearing a lot recently about <a href="http://my.safaribooksonline.com/book/web-development/web-services/9781449377465/continuous-deployment/continuous_deployment#X2ludGVybmFsX0h0bWxWaWV3P3htbGlkPTk3ODE0NDkzNzc0NjUlMkZ0aGVfcXVhbGl0eV9kZWZlbmRlcnNfYXBvc3Ryb3BoeV9sYW1lbnQmcXVlcnk9">continuous deployment</a> especially in the context of building a lean startup, so I decided to try and get one of my projects running with continuous deployment.</p>

<h4>Here&rsquo;s what I learned today:</h4>

<ol>
<li><p><a href="https://travis-ci.org/">Travis CI</a> is an open source tool for continuous integration and deployment.</p></li>
<li><p>There are several steps to setting up your project with Travis CI:</p>

<ul>
<li><p>The <a href="http://docs.travis-ci.com/user/getting-started/">getting started guide</a> does a good job explaining the basics.</p></li>
<li><p>For my project, I needed to make a few customizations the biggest one was creating a test database that my test could use. Here is my <code>.travis.yml</code>:</p>

<pre><code>         language: ruby
         rvm:
         - 2.0.0
         env:
         - DB=postresql
         script:
         - bundle exec rake db:test:prepare --trace
         - bundle exec rspec
         before_script:
         - psql -c 'create database my_app_test;' -U postgres 
</code></pre></li>
</ul>
</li>
<li><p>Travis CI <a href="http://docs.travis-ci.com/user/deployment/heroku/">integrates nicely with Heroku</a>, so that your code be deployed after a successful build. I was having some problems deploying using Anvil, so I switched to using git. Here is what I added to my <code>.travis.yml</code> for deploying to Heroku:</p>

<pre><code> deploy:
   provider: heroku
   api_key:
     secure: encrypted-key
   strategy: git
   app: epicodus-qa
   run: "rake db:migrate"
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Indexes]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/02/13/database-indexes/"/>
    <updated>2014-02-13T15:43:48-08:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/02/13/database-indexes</id>
    <content type="html"><![CDATA[<p>Prior to today, I knew database indexes were something you used to help speed up a query, but I didn&rsquo;t really understand their importance. I read this great <a href="http://robots.thoughtbot.com/a-grand-piano-for-your-violin">Thoughtbot blog</a> to learn more about them.</p>

<h4>Here is what I learned today:</h4>

<ol>
<li><p>When you perform a database query on a column without an index the database will look at each row and compare its value with the query value. If you don&rsquo;t have many records this isn&rsquo;t a big deal, but when you are talking about thousands or millions of rows that is a lot of work! Indexes provide a quick reference for the database, so it can retreive the matching records without having to look at every row.</p></li>
<li><p>If you are using PostgreSQL (and apparently most other SQL databases), the primary key is index automatically. This means that in Rails the &ldquo;id&rdquo; column is indexed automatically because Rails tells the database the &ldquo;id&rdquo; column is the primary key.</p></li>
<li><p>Basically any column you have to query for a set of records should be indexed.</p></li>
<li><p>There are two downsides to adding an index. First, anytime you INSERT or UPDATE, the database must write both the record and the index reference which means more work for the database. Second, if you are creating an index for an existing set of records it could take a while. The Thoughtbot blog talks about a database migration that took 7 hours!</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First!]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/02/12/first/"/>
    <updated>2014-02-12T15:38:22-08:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/02/12/first</id>
    <content type="html"><![CDATA[<p>They say starting is the hardest part. My initial idea for this blog is to post the things I learned during the day and the resources that helped me learn them.</p>

<h3>Here is what I learned today:</h3>

<ol>
<li><p>You can host a blog on Github using <a href="http://pages.github.com/">Github Pages</a>. There is a framework called <a href="http://octopress.org">Octopress</a> to help make things easy. I followed the documentation for <a href="http://octopress.org/docs/setup/">initial setup</a> and launched this blog.</p></li>
<li><p>Deploying the changes for the blog can be done with the following steps:</p>

<p> Generate the blog with</p>

<p> <code>
 rake generate
</code></p>

<p> Deploy</p>

<p> <code>
 rake deploy
</code></p>

<p> Commit the source for the blog.</p>

<p> <code>
 git add .
 git commit -m 'your message'
 git push origin source
</code></p></li>
<li><p>You can preview changes to the blog before deploying using the following</p>

<p> <code>
 rake preview
</code></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
