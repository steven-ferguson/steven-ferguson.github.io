<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OOP | Things I Learned Today]]></title>
  <link href="http://steven-ferguson.github.io/blog/categories/oop/atom.xml" rel="self"/>
  <link href="http://steven-ferguson.github.io/"/>
  <updated>2014-06-16T23:45:16-07:00</updated>
  <id>http://steven-ferguson.github.io/</id>
  <author>
    <name><![CDATA[Steven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Duck Typing]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/06/16/duck-typing/"/>
    <updated>2014-06-16T23:28:18-07:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/06/16/duck-typing</id>
    <content type="html"><![CDATA[<p>One of my big breakthroughs in understanding object oriented design in Ruby came when I learned about <a href="http://en.wikipedia.org/wiki/Duck_typing">duck typing</a>. Wikipedia provides a nice definiition of the concept:</p>

<blockquote><p>duck typing is a style of typing in which an object&rsquo;s methods and properties determine the valid semantics, rather than its inheritance from a particular class or implementation of an explicit interface.</p></blockquote>

<p>This means that in Ruby it does not matter if an object is a specific type or class, only that it can respond to a given message. For example, in the <code>stringify</code> method below, it does not matter if the argument is an integer or symbol or some other class, only that it can respond to the <code>to_s</code> method.</p>

<pre><code>def stringify(a)
  a.to_s
end

stringify(1)
=&gt; "1"

stringify(:hello)
=&gt; "hello"

class NewClass
  def to_s
    "works for custom objects too!"
  end
end

stringify(NewClass.new)
=&gt; "works for custom objects too!"
</code></pre>

<p>Not having to care about a specific object&rsquo;s class enables a lot of flexiblity for swaping out collaborator objects. To illustrate this, let&rsquo;s take a look at an example:</p>

<h3>File Storage with Duck Typing</h3>

<p>My app generates reports, and I would like to save these reports. Initially, I just want to save the reports to my local disk.</p>

<p>```ruby
class Report
  def initialize(name, data)</p>

<pre><code>@name = name
@data = data
</code></pre>

<p>  end</p>

<p>  def save_to(storage)</p>

<pre><code>storage.store(@name, @data)
</code></pre>

<p>  end
end</p>

<p>class FileStorage
  def store(file_name, data)</p>

<pre><code>File.open("reports/#{file_name}", 'w') do |file|
  file.write(data)
end
</code></pre>

<p>  end
end</p>

<p>report = Report.new(&lsquo;Sales Figures&rsquo;, &lsquo;sales data blah&hellip;&rsquo;)
file_store = FileStorage.new
report.save_to(file_store)
```</p>

<p>Later, I decide that it would also be nice to have the ability to upload reports to S3. With duck typing, implementing this new feature is as simple as creating a new class for uploading to S3 which implements a <code>store</code> method:</p>

<p>```ruby
class S3Storage
  def initialize(bucket_name)</p>

<pre><code>@bucket = AWS::S3.new.buckets[bucket_name]
</code></pre>

<p>  end</p>

<p>  def store(file_name, data)</p>

<pre><code>@bucket.objects.create(file_name, data)
</code></pre>

<p>  end
end</p>

<p>report = Report.new(&lsquo;Sales Figures&rsquo;, &lsquo;sales data blah&hellip;&rsquo;)
s3_store = S3Storage.new(&lsquo;my_bucket&rsquo;)
report.save_to(s3_store)
```</p>

<p>Start thinking about objects in terms of the messages they receive, and you will be rewarded with the flexibility that duck typing allows.</p>
]]></content>
  </entry>
  
</feed>
