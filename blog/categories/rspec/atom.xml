<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RSpec | Things I Learned about Rails Today]]></title>
  <link href="http://steven-ferguson.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://steven-ferguson.github.io/"/>
  <updated>2014-07-19T15:03:11-07:00</updated>
  <id>http://steven-ferguson.github.io/</id>
  <author>
    <name><![CDATA[Steven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using RSpec Shared Context for DRYer Specs]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/05/17/using-rspec-shared-context-for-dryer-specs/"/>
    <updated>2014-05-17T18:20:42-07:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/05/17/using-rspec-shared-context-for-dryer-specs</id>
    <content type="html"><![CDATA[<p>Do you ever find that many of your specs have a similar setup that you are repeating over and over? I often find this happening when I&rsquo;m writing feature specs that require a logged in user. For example:</p>

<p>```ruby  <br/>
feature &lsquo;some super cool feature&rsquo; do
  background &lsquo;login an admin&rsquo; do</p>

<pre><code>user = create(:user, role: 'admin')
user.confirm!
login_as(user, scope: :user)
</code></pre>

<p>  end</p>

<p>  scenario &lsquo;my super cool scenario&rsquo; do
  &hellip;
  end
end
```</p>

<p>If my login or authentication process changes, I have to manually go into each spec and change the code. I also find that this setup code clutters the spec and makes it harder to read. If we could extract the setup code and replace it with an easy to read single line, it would solve both of these problems.</p>

<p><a href="https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-context">RSpec shared contexts</a> provide just this type of solution. Using a shared context we can extract the setup into its own file, and rewrite our feature spec in a cleaner way:</p>

<p>```ruby
feature &lsquo;some super cool feature&rsquo; do
  include_context &lsquo;a logged in admin&rsquo;</p>

<p>  scenario &lsquo;my super cool scenario&rsquo; do
  &hellip;
  end
end
```</p>

<p>To create a shared context:
```ruby</p>

<h1>./spec/support/shared_contexts/a_logged_in_admin.rb</h1>

<p>shared_context &lsquo;a logged in admin&rsquo; do
  before &lsquo;create and login admin&rsquo; do</p>

<pre><code>user = create(:user, role: 'admin')
user.confirm!
login_as(user, scope: :user)
</code></pre>

<p>  end
end
```</p>

<p>Since all files located in <code>spec/support</code> are automatically required in the default <code>spec_helper.rb</code>, we can call the context from any spec. Now when we need to change how a user is logged in, we just have to change the code in our shared context and without having to change our specs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Outgoing Command Messages With RSpec]]></title>
    <link href="http://steven-ferguson.github.io/blog/2014/03/09/mocks-and-stubs-with-bogus/"/>
    <updated>2014-03-09T13:10:30-07:00</updated>
    <id>http://steven-ferguson.github.io/blog/2014/03/09/mocks-and-stubs-with-bogus</id>
    <content type="html"><![CDATA[<p>As the size and complexity of the applications I have been working on has grown, the importance of writing good unit test has become increasingly apparent. The goal is to have a test suite that is fast and able to withstand changes.</p>

<p>One of the best approaches I have found to writing good unit tests is discussed by Sandi Metz in <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object Oriented Design in Ruby</a> and also in a <a href="https://speakerdeck.com/skmetz/magic-tricks-of-testing-railsconf">talk she gave at RailsConf in 2013</a>.</p>

<p>She has a rule about testing outgoing command messages that says, <em>&ldquo;expect to send outgoing command messages&rdquo;</em>. This means that we should assert that the method actually issues the command message, but we don&rsquo;t assert the result of that message.</p>

<p>For example, suppose I have a party, and I want users to be able to RSVP:</p>

<p>```ruby
class User
  def rsvp(party)</p>

<pre><code>party.add_guest(self)
</code></pre>

<p>  end
end
<code>
I want to assert that when</code>user.rsvp(party)<code>is called, the</code>add_guest``` message is sent to the party object. Mocks are the perfect tool for testing these command messages because they allow us to test that the correct message is being passed without worrying about how the other object actually deals with that message:</p>

<p>```ruby
describe User do
  describe &lsquo;#rsvp&rsquo; do</p>

<pre><code>it "tells the party to add the user as a guest" do 
  user = User.new
  party = double('party')
  expect(party).to receive(:add_guest).with(user)
  user.rsvp(party)
end
</code></pre>

<p>  end
end
<code>
This allows us to test the</code>rsvp<code>method without having to actually deal with the Party class' implementation of</code>add_guest<code>. But what happens if we change the public interface for</code>add_guest```to allow a guest specify how many to friends they plan to bring to the party?</p>

<p>```ruby
class Party
  def add_guest(user, number_of_companions)</p>

<pre><code>...
</code></pre>

<p>  end
end</p>

<p>class User
  def rsvp(party)</p>

<pre><code>party.add_guest(self)
</code></pre>

<p>  end
end
```</p>

<p>Our <code>rsvp</code> method is now broken because the <code>add_guest</code> method requires two arguments, but we are only passing it one. Unfortunately our test for <code>rsvp</code> still passes because our test double does not reflect the actual interface that it is mocking.</p>

<p>To solve this problem I recently started using a mocking framework called <a href="https://github.com/psyho/bogus">Bogus</a>. It ensures that your test doubles have the same interface  as the real class.</p>

<p>```ruby
require &lsquo;bogus/rspec&rsquo;</p>

<p>&hellip;
  describe &lsquo;#rsvp&rsquo; do</p>

<pre><code>it "tells the party to add the user as a guest" do 
  user = User.new
  party = fake(:party)
  user.rsvp(party)
  expect(party).to have_received.add_guest(user)
end
</code></pre>

<p>  end
&hellip;
```</p>

<p>Now when we run the test we receive the following failure:</p>

<p>```
Failures:</p>

<p>  1) User#rsvp tells the party to add the user as a guest</p>

<pre><code> Failure/Error: party.add_guest(self)
 ArgumentError:
   wrong number of arguments (1 for 2)
</code></pre>

<p>```</p>

<p>Great! Our test double now implements the same interface as the actual Party class and alerts us that our <code>rsvp</code> method is not passing the correct number of arguments. Let&rsquo;s update <code>rsvp</code>:</p>

<p>```ruby
class User
  def rsvp(party)</p>

<pre><code>party.add_guest(self, 0)
</code></pre>

<p>  end
end
```
And run our test:</p>

<p>```
Failures:</p>

<p>  1) User#rsvp tells the party to add the user as a guest</p>

<pre><code> Failure/Error: expect(party).to have_received.add_guest(user)
 ArgumentError:
   tried to stub add_guest(user, number_of_companions) with arguments: #&lt;User:0x007fa49210caa0&gt;
</code></pre>

<p>```</p>

<p>Whoops! Looks like our stub for add_guest doesn&rsquo;t implement the correct interface for <code>add_guest</code>. Let&rsquo;s update it:</p>

<p>```ruby
&hellip;
  describe &lsquo;#rsvp&rsquo; do</p>

<pre><code>it "tells the party to add the user as a guest" do 
  ...
  expect(party).to have_received.add_guest(user, 0)
  ...
</code></pre>

<p>Finished in 0.006 seconds
1 example, 0 failures
```</p>

<p>Another great feature of Bogus is that it supports mocking a duck type. For example, suppose that in addition to parties, we want users to be able to rsvp to dinners. We can implement this with a duck type by creating an <code>add_guest</code> method for our new Dinner class:</p>

<p>```ruby
class Dinner
  def add_guest(user, number_of_companions)
  &hellip;
  end
end</p>

<p>class User
  def rsvp(guestable)</p>

<pre><code>guestable.add_guest(self, 0)
</code></pre>

<p>  end
end
```</p>

<p>And now in our test we can mock our duck type interface:</p>

<p>```ruby
describe User do
  describe &lsquo;#rsvp&rsquo; do</p>

<pre><code>it "tells the guestable to add the user as a guest" do 
  user = User.new
  guestable = fake(:guestable) { [Party, Dinner] }
  user.rsvp(guestable)
  expect(guestable).to have_received.add_guest(user, 0)
end
</code></pre>

<p>  end
end
```</p>

<p>Mocks are a great way to focus on the messages that your objects are sending when testing. Give them a try and experience the benefits of a faster more resilient test suite.</p>
]]></content>
  </entry>
  
</feed>
